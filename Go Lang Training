GO LANG INSTALLATION (go.dev/doc/install) go version -> 1.19
after following the above steps in doc then follow below 

-> nano .bashrc

-> Two Statements need to be added in .bashrc to make the path permanent of go 
 1. export PATH=$PATH:/usr/local/go  (This is the localtion of go in our system)
 2. export GOPATH= ~/repos/go/      (setting our go path)
 
 3. source ~/.bashrc
 4. source $HOME/.profile
 
 GO LAND IDE INSTALLATION
 
 -> Open new project in location ~repos/go(empty)/src/Training 
 SDK add -> /usr/local/go
 
 file creation of go
 
 1. Difference of C and Go
 2. Structure of Go
 3. Why only package main need to be used in go 
 
 
 
 
ssh-keygen -t ed25519 -C "vijayadurgakrishnaprasad.maramalla@zopsmart.com"


my ssh key 

ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAXj0ap/+L9s6CrOY5Yse4q9trvbma3SMi71EPFDMMSb vijayadurgakrishnaprasad.maramalla@zopsmart.com

file watchers  -> go fmt and go imports

file watchers -> beautifying our code takes care of indentations and etc 

how to autosave the code in goland ide - figureout (done)


git configuration 

git config --global user.name krishnarakshann
git config --global user.email vijayadurgakrishnaprasad.maramalla@zopsmart.com
git config --global url.ssh://git@github.com/.insteadOf https://github.com/

// to make sure of ur config details 
nano ~/.gitconfig (you can see the above configured details)

git basics 

So First you ned to make sure that the directory has initialised git 

// Initialising git 
move to the particular directory where you want to initialise git 
-> touch README.md
-> git init

// Adding the files to staging area for commit

git add . (to push all the files in the directory)
git status (to know which files need to be commited or if there are any changes)

// commiting the changes to git repo 

git commit -m "Commit Message"
git remote add origin repository url
git push -u origin master


git diff (To know if there are any changes in the files in the particular repo from last commit)

git checkout 

git log (History of the Commits )
 
Each time you make changes that you want to be reflected on GitHub, the following are the most common flow of commands:

$ git add .
$ git status # Lists all new or modified files to be committed
$ git commit -m "Second commit"
$ git push -u origin master


From our repository to Local System

// Move to the directory where you want to clone your repository 

git clone repository_url -> This command is used to make a copy of a repository from an existing URLof your repository into your local system

git pull 
git fetch
git merge

<<<<<<< HEAD
BRANCHES IN GIT 
=======

Branches in Git
>>>>>>> master

git branch <branchname>
git checkout branchname(To switch to a required branch from current )
git branch -d <branchname> (To delete a branch after merging it into main branch)
git branch -D <branchname> (Force Deletion of branch before merging it into main/master)

// Merging into Master/Main

<<<<<<< HEAD
=======

1 st step is to move to the correct merge receiving


>>>>>>> master
difference between branches nd remote branches
relation between a commit and branch
difference between commit and merge commit 





















